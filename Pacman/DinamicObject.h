#pragma once
#include "StaticObject.h"

// Наследуемся от StaticObject класса, чтобы получить его базовый функционал.
class DinamicObject :
	public StaticObject
{
public:
	DinamicObject();
	virtual ~DinamicObject();

	/* Интерфейс доступа к внутренней переменной хранящей 
	 * значение скорости игры:
	 * s - ссылка на значение скорости игры 
	*/
	void setSpeed(float& s);

	/* Интерфейс для добавления в контейнер типа Vector 
	 * очередной картинки, отображающей состояние объека
	 * в определённый момент :
	 * spr - ссылка на уже сформинованную картинку.
	*/
	void setVSprites(Sprite& spr);

	/* Интерфейс здаёт значение внутненей переменной 
	 * текущее направление движения объекта:
	 * х - движение по оси х.
	 * у - движение по оси у.
	 * Предусмотренно три состояния:
	 *  0 - нет движения по оси.
	 *  1 - движение в сторону увеличения значения оси.
	 * -1 - движение в сторону уменьшения значения оси.
	 * Движение по косым линиям не предусмотренно.
	*/
	void setMoveVector(int x, int y);

	/* Интерфейс возвращающий значение внутренней 
	 * переменной храящей текущее направление движения
	 * объекта.
	*/
	std::pair<int, int>& getMoveVector();

	/* Интерфейс для обновления позиции объекта на 
	 * игровом поле, согласно вектору текущего движения,
	 * и подготовке его к перерисовке.
	 * time - значение таймера для сдвига объекта.
	*/
	void update(const float& time);

	/* Интерфейс предоставляющий возможсность проверки
	 * столкновения объекта со стенами на игровом поле.
	 * wall - ссылка на контейнер содержащий в себе все
	 * клетки со стенами игрового поля.
	*/
	bool checkCollisionWall(std::vector <StaticObject*>& wall);
	/* Интерфейс предоставляющий возможность, в случае столкновения
	 * со стеной, откатить объект обратно его первоначального движения
	 * и не дать проходить через стены.
	 * time - значение таймера для сдвига объекта.
	*/
	void moveBack(const float& time);
protected:
	/* Внутренняя функция задающая картинку отображающую
	 * текущее состояние объекта.
	*/
	void setTexture();

	/* Внутренняя функция меняющая текущее значение внутреней
	 * переменной отвечающей за момент переключение картинки 
	 * отображающей текущее состояние объекта.
	*/
	void setCurrent(const float& time);

	/* Функция делает провенку на столкновение данного объекта
	 * с другим объектом, координаты которого предаются в функцию.
	 * p - ссылка на координаты объекта возможного столкновения.
	 * Возвращает:
	 * true - в случае столкновения.
	 * false - в случает отсутствия столкновения.
	*/
	bool collision(std::pair<float, float>& p);

	// Внутненняя переменная хранящая значение скорости игры
	float speed = 0.0;
	
	/* Внутренняя перменная отвечающая за момент переключение картинки 
	 * отображающей текущее состояние объекта.
	*/
	float current = 0.0;

	/* Внутренняя перменная хранящая в себе значение текущего
	 * вектора движения объекта.
	*/
	std::pair<int, int> moveVector = {0, -1};

	/* Коллекция картинок отвечающих за отображение состояния
	 * объекта в разные моменты.
	*/
	std::vector<Sprite> vSprites;
};

