#pragma once
#include "DinamicObject.h"

class Player :
	public DinamicObject
{
public:
	Player();
	~Player();

	/* »нтерфейс предоставл€ющий возможность обработки нажати€
	 * игроком клавиши на клавиатуре:
	 * key  - код нажатой клавиши.
	 * time - значение таймера дл€ сдвига объекта.
	*/
	virtual void setKeyPressed(Keyboard::Key key, float& time);

	/* »нтерфейс предоставл€ющий возможсность проверки
	 * столкновени€ объекта с сокровищем на игровом поле:
	 * gold - ссылка на контейнер содержащий в себе все
	 * клетки с сокровищами игрового пол€.
	*/
	virtual void checkCollisionGold(std::vector <StaticObject*>& gold);

	/* »нтерфейс предоставл€ющий возможсность проверки
	 * столкновени€ объекта с привидени€ми на игровом поле.
	 * gosts - ссылка на контейнер содержащий в себе все
	 * клетки с привидени€ми игрового пол€.
	*/
	virtual bool checkCollisionGosts(std::vector <DinamicObject*>& gosts);

	/* »нтерфейс предоставл€ющий возможсность отрисовки
	 * состо€ни€ игрока вли€ющие на состо€ние игры.
	 * ѕринимает в качестве аргумента:
	 * window - ссылка на основное окно игры.
	*/
	virtual void drawPlayerStatus(RenderWindow& window);

	/*  ласс хран€щий в себе состо€ние игрока вли€ющее
	 * на состо€ние игры:
	 * dead - игрок погиб.
	 * win - игрок добралс€ до выходи и выиграл.
	*/
	enum class PlayerStatus
	{
		live, // »грок жив и может продолжать игру.
		dead,
		win
	} playerStatus = PlayerStatus::live;
private:
	// ‘ункци€ обрабатывающа€ нажатие клавиши на лево.
	virtual void keyLeft(float& time);

	// ‘ункци€ обрабатывающа€ нажатие клавиши на право.
	virtual void keyRight(float& time);

	// ‘ункци€ обрабатывающа€ нажатие клавиши вверх.
	virtual void keyUp(float& time);
	
	// ‘ункци€ обрабатывающа€ нажатие клавиши вниз.
	virtual void keyDown(float& time);

	/* ‘ункци€ делает провенку на столкновение игрока с сокровищем,
	 * координаты которого предаютс€ в функцию:
	 * p - ссылка на координаты объекта возможного столкновени€.
	 * 
	 * ¬озвращает:
	 * true - в случае столкновени€.
	 * false - в случает отсутстви€ столкновени€.
	*/
	virtual bool collisionGold(std::pair<float, float>& p);

	/* ¬нутренн€€ переменна€ хран€ща€ в себе шрифт дл€ текста
	 * отображающего состо€ние игрок.
	*/
	Font font;
};
